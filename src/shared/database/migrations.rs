use sqlx::{
    migrate::{MigrateError, Migrator},
    Executor, PgPool,
};
use std::path::Path;
use tracing::{error, info};

pub async fn run_migrations(pool: &PgPool) -> Result<(), MigrateError> {
    info!("Running database migrations...");

    // –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    let migrations_path = Path::new("./migrations");

    match Migrator::new(migrations_path).await {
        Ok(migrator) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã
            let migrations = migrator.iter().collect::<Vec<_>>();
            info!("Found {} migration(s):", migrations.len());
            for migration in &migrations {
                info!("  - {} : {}", migration.version, migration.description);
            }

            match migrator.run(pool).await {
                Ok(_) => {
                    info!("‚úÖ Database migrations completed successfully");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    let applied_migrations: Vec<(i64, String)> = sqlx::query_as(
                        "SELECT version, description FROM _sqlx_migrations ORDER BY version",
                    )
                    .fetch_all(pool)
                    .await
                    .map_err(MigrateError::Execute)?;

                    info!("Applied migrations:");
                    for (version, description) in applied_migrations {
                        info!("  ‚úì {} : {}", version, description);
                    }

                    Ok(())
                }
                Err(e) => {
                    error!("Failed to run migrations: {}", e);
                    Err(e)
                }
            }
        }
        Err(e) => {
            error!(
                "Failed to create migrator from path {:?}: {}",
                migrations_path, e
            );
            Err(e)
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
pub async fn check_pending_migrations(pool: &PgPool) -> Result<(), MigrateError> {
    info!("Checking for pending migrations...");

    let migrations_path = Path::new("./migrations");
    let migrator = Migrator::new(migrations_path).await?;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    let all_migrations = migrator.iter().collect::<Vec<_>>();

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    let applied: Vec<(i64,)> =
        sqlx::query_as("SELECT version FROM _sqlx_migrations ORDER BY version")
            .fetch_all(pool)
            .await
            .map_err(MigrateError::Execute)?;

    let applied_versions: std::collections::HashSet<i64> =
        applied.into_iter().map(|(v,)| v).collect();

    let pending: Vec<_> = all_migrations
        .iter()
        .filter(|m| !applied_versions.contains(&m.version))
        .collect();

    if pending.is_empty() {
        info!("‚úÖ No pending migrations");
    } else {
        info!("üìã Found {} pending migration(s):", pending.len());
        for migration in pending {
            info!("  - {} : {}", migration.version, migration.description);
        }
    }

    Ok(())
}
